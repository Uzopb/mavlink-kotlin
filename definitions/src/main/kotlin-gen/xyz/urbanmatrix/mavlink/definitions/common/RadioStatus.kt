package xyz.urbanmatrix.mavlink.definitions.common

import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.Byte
import kotlin.ByteArray
import kotlin.Int
import kotlin.UByte
import kotlin.UInt
import kotlin.UShort
import kotlin.Unit
import xyz.urbanmatrix.mavlink.api.GeneratedMavField
import xyz.urbanmatrix.mavlink.api.GeneratedMavMessage
import xyz.urbanmatrix.mavlink.api.MavDeserializer
import xyz.urbanmatrix.mavlink.api.MavMessage
import xyz.urbanmatrix.mavlink.serialization.decodeUInt16
import xyz.urbanmatrix.mavlink.serialization.decodeUInt8
import xyz.urbanmatrix.mavlink.serialization.encodeUInt16
import xyz.urbanmatrix.mavlink.serialization.encodeUInt8
import xyz.urbanmatrix.mavlink.serialization.truncateZeros

/**
 * Status generated by radio and injected into MAVLink stream.
 */
@GeneratedMavMessage(
  id = 109u,
  crcExtra = -71,
)
public data class RadioStatus(
  /**
   * Local (message sender) recieved signal strength indication in device-dependent units/scale.
   * Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val rssi: UByte = 0u,
  /**
   * Remote (message receiver) signal strength indication in device-dependent units/scale. Values:
   * [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remrssi: UByte = 0u,
  /**
   * Remaining free transmitter buffer space.
   */
  @GeneratedMavField(type = "uint8_t")
  public val txbuf: UByte = 0u,
  /**
   * Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on
   * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val noise: UByte = 0u,
  /**
   * Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on
   * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remnoise: UByte = 0u,
  /**
   * Count of radio packet receive errors (since boot).
   */
  @GeneratedMavField(type = "uint16_t")
  public val rxerrors: UShort = 0u,
  /**
   * Count of error corrected radio packets (since boot).
   */
  @GeneratedMavField(type = "uint16_t")
  public val fixed: UShort = 0u,
) : MavMessage<RadioStatus> {
  public override val instanceMetadata: MavMessage.Metadata<RadioStatus> = METADATA

  public override fun serializeV1(): ByteArray {
    val outputBuffer = ByteBuffer.allocate(SIZE_V1).order(ByteOrder.LITTLE_ENDIAN)
    outputBuffer.encodeUInt16(rxerrors)
    outputBuffer.encodeUInt16(fixed)
    outputBuffer.encodeUInt8(rssi)
    outputBuffer.encodeUInt8(remrssi)
    outputBuffer.encodeUInt8(txbuf)
    outputBuffer.encodeUInt8(noise)
    outputBuffer.encodeUInt8(remnoise)
    return outputBuffer.array()
  }

  public override fun serializeV2(): ByteArray {
    val outputBuffer = ByteBuffer.allocate(SIZE_V2).order(ByteOrder.LITTLE_ENDIAN)
    outputBuffer.encodeUInt16(rxerrors)
    outputBuffer.encodeUInt16(fixed)
    outputBuffer.encodeUInt8(rssi)
    outputBuffer.encodeUInt8(remrssi)
    outputBuffer.encodeUInt8(txbuf)
    outputBuffer.encodeUInt8(noise)
    outputBuffer.encodeUInt8(remnoise)
    return outputBuffer.array().truncateZeros()
  }

  public companion object {
    private const val ID: UInt = 109u

    private const val CRC_EXTRA: Byte = -71

    private const val SIZE_V1: Int = 9

    private const val SIZE_V2: Int = 9

    private val DESERIALIZER: MavDeserializer<RadioStatus> = MavDeserializer { bytes ->
      val inputBuffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN)
      val rxerrors = inputBuffer.decodeUInt16()
      val fixed = inputBuffer.decodeUInt16()
      val rssi = inputBuffer.decodeUInt8()
      val remrssi = inputBuffer.decodeUInt8()
      val txbuf = inputBuffer.decodeUInt8()
      val noise = inputBuffer.decodeUInt8()
      val remnoise = inputBuffer.decodeUInt8()

      RadioStatus(
        rssi = rssi,
        remrssi = remrssi,
        txbuf = txbuf,
        noise = noise,
        remnoise = remnoise,
        rxerrors = rxerrors,
        fixed = fixed,
      )
    }


    private val METADATA: MavMessage.Metadata<RadioStatus> = MavMessage.Metadata(ID, CRC_EXTRA,
        DESERIALIZER)

    public val classMetadata: MavMessage.Metadata<RadioStatus> = METADATA

    public fun builder(builderAction: Builder.() -> Unit): RadioStatus =
        Builder().apply(builderAction).build()
  }

  public class Builder {
    public var rssi: UByte = 0u

    public var remrssi: UByte = 0u

    public var txbuf: UByte = 0u

    public var noise: UByte = 0u

    public var remnoise: UByte = 0u

    public var rxerrors: UShort = 0u

    public var fixed: UShort = 0u

    public fun build(): RadioStatus = RadioStatus(
      rssi = rssi,
      remrssi = remrssi,
      txbuf = txbuf,
      noise = noise,
      remnoise = remnoise,
      rxerrors = rxerrors,
      fixed = fixed,
    )
  }
}
