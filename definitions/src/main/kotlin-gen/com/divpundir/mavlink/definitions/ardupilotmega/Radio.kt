package com.divpundir.mavlink.definitions.ardupilotmega

import com.divpundir.mavlink.api.GeneratedMavField
import com.divpundir.mavlink.api.GeneratedMavMessage
import com.divpundir.mavlink.api.MavMessage
import com.divpundir.mavlink.serialization.decodeUInt16
import com.divpundir.mavlink.serialization.decodeUInt8
import com.divpundir.mavlink.serialization.encodeUInt16
import com.divpundir.mavlink.serialization.encodeUInt8
import com.divpundir.mavlink.serialization.truncateZeros
import kotlin.Byte
import kotlin.Int
import kotlin.UByte
import kotlin.UInt
import kotlin.UShort
import kotlin.Unit
import okio.Buffer
import okio.BufferedSource

/**
 * Status generated by radio.
 */
@GeneratedMavMessage(
  id = 166u,
  crcExtra = 21,
)
public data class Radio(
  /**
   * Local signal strength.
   */
  @GeneratedMavField(type = "uint8_t")
  public val rssi: UByte = 0u,
  /**
   * Remote signal strength.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remrssi: UByte = 0u,
  /**
   * How full the tx buffer is.
   */
  @GeneratedMavField(type = "uint8_t")
  public val txbuf: UByte = 0u,
  /**
   * Background noise level.
   */
  @GeneratedMavField(type = "uint8_t")
  public val noise: UByte = 0u,
  /**
   * Remote background noise level.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remnoise: UByte = 0u,
  /**
   * Receive errors.
   */
  @GeneratedMavField(type = "uint16_t")
  public val rxerrors: UShort = 0u,
  /**
   * Count of error corrected packets.
   */
  @GeneratedMavField(type = "uint16_t")
  public val fixed: UShort = 0u,
) : MavMessage<Radio> {
  public override val instanceCompanion: MavMessage.MavCompanion<Radio> = Companion

  public override fun serializeV1(): BufferedSource {
    val output = Buffer()
    output.encodeUInt16(rxerrors)
    output.encodeUInt16(fixed)
    output.encodeUInt8(rssi)
    output.encodeUInt8(remrssi)
    output.encodeUInt8(txbuf)
    output.encodeUInt8(noise)
    output.encodeUInt8(remnoise)
    return output
  }

  public override fun serializeV2(): BufferedSource {
    val output = Buffer()
    output.encodeUInt16(rxerrors)
    output.encodeUInt16(fixed)
    output.encodeUInt8(rssi)
    output.encodeUInt8(remrssi)
    output.encodeUInt8(txbuf)
    output.encodeUInt8(noise)
    output.encodeUInt8(remnoise)
    output.truncateZeros()
    return output
  }

  public companion object : MavMessage.MavCompanion<Radio> {
    private const val SIZE_V1: Int = 9

    private const val SIZE_V2: Int = 9

    public override val id: UInt = 166u

    public override val crcExtra: Byte = 21

    public override fun deserialize(source: BufferedSource): Radio {
      val rxerrors = source.decodeUInt16()
      val fixed = source.decodeUInt16()
      val rssi = source.decodeUInt8()
      val remrssi = source.decodeUInt8()
      val txbuf = source.decodeUInt8()
      val noise = source.decodeUInt8()
      val remnoise = source.decodeUInt8()

      return Radio(
        rssi = rssi,
        remrssi = remrssi,
        txbuf = txbuf,
        noise = noise,
        remnoise = remnoise,
        rxerrors = rxerrors,
        fixed = fixed,
      )
    }

    public operator fun invoke(builderAction: Builder.() -> Unit): Radio =
        Builder().apply(builderAction).build()
  }

  public class Builder {
    public var rssi: UByte = 0u

    public var remrssi: UByte = 0u

    public var txbuf: UByte = 0u

    public var noise: UByte = 0u

    public var remnoise: UByte = 0u

    public var rxerrors: UShort = 0u

    public var fixed: UShort = 0u

    public fun build(): Radio = Radio(
      rssi = rssi,
      remrssi = remrssi,
      txbuf = txbuf,
      noise = noise,
      remnoise = remnoise,
      rxerrors = rxerrors,
      fixed = fixed,
    )
  }
}
