package com.divpundir.mavlink.definitions.common

import com.divpundir.mavlink.api.GeneratedMavField
import com.divpundir.mavlink.api.GeneratedMavMessage
import com.divpundir.mavlink.api.MavMessage
import com.divpundir.mavlink.serialization.decodeUInt16
import com.divpundir.mavlink.serialization.decodeUInt8
import com.divpundir.mavlink.serialization.encodeUInt16
import com.divpundir.mavlink.serialization.encodeUInt8
import com.divpundir.mavlink.serialization.truncateZeros
import kotlin.Byte
import kotlin.ByteArray
import kotlin.UByte
import kotlin.UInt
import kotlin.UShort
import kotlin.Unit
import okio.Buffer

/**
 * Status generated by radio and injected into MAVLink stream.
 */
@GeneratedMavMessage(
  id = 109u,
  crcExtra = -71,
)
public data class RadioStatus(
  /**
   * Local (message sender) recieved signal strength indication in device-dependent units/scale.
   * Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val rssi: UByte = 0u,
  /**
   * Remote (message receiver) signal strength indication in device-dependent units/scale. Values:
   * [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remrssi: UByte = 0u,
  /**
   * Remaining free transmitter buffer space.
   */
  @GeneratedMavField(type = "uint8_t")
  public val txbuf: UByte = 0u,
  /**
   * Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on
   * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val noise: UByte = 0u,
  /**
   * Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on
   * SiK radios). Values: [0-254], UINT8_MAX: invalid/unknown.
   */
  @GeneratedMavField(type = "uint8_t")
  public val remnoise: UByte = 0u,
  /**
   * Count of radio packet receive errors (since boot).
   */
  @GeneratedMavField(type = "uint16_t")
  public val rxerrors: UShort = 0u,
  /**
   * Count of error corrected radio packets (since boot).
   */
  @GeneratedMavField(type = "uint16_t")
  public val fixed: UShort = 0u,
) : MavMessage<RadioStatus> {
  public override val instanceCompanion: MavMessage.MavCompanion<RadioStatus> = Companion

  public override fun serializeV1(): ByteArray {
    val buffer = Buffer()
    buffer.encodeUInt16(rxerrors)
    buffer.encodeUInt16(fixed)
    buffer.encodeUInt8(rssi)
    buffer.encodeUInt8(remrssi)
    buffer.encodeUInt8(txbuf)
    buffer.encodeUInt8(noise)
    buffer.encodeUInt8(remnoise)
    return buffer.readByteArray()
  }

  public override fun serializeV2(): ByteArray {
    val buffer = Buffer()
    buffer.encodeUInt16(rxerrors)
    buffer.encodeUInt16(fixed)
    buffer.encodeUInt8(rssi)
    buffer.encodeUInt8(remrssi)
    buffer.encodeUInt8(txbuf)
    buffer.encodeUInt8(noise)
    buffer.encodeUInt8(remnoise)
    return buffer.readByteArray().truncateZeros()
  }

  public companion object : MavMessage.MavCompanion<RadioStatus> {
    public override val id: UInt = 109u

    public override val crcExtra: Byte = -71

    public override fun deserialize(bytes: ByteArray): RadioStatus {
      val buffer = Buffer().write(bytes)

      val rxerrors = buffer.decodeUInt16()
      val fixed = buffer.decodeUInt16()
      val rssi = buffer.decodeUInt8()
      val remrssi = buffer.decodeUInt8()
      val txbuf = buffer.decodeUInt8()
      val noise = buffer.decodeUInt8()
      val remnoise = buffer.decodeUInt8()

      return RadioStatus(
        rssi = rssi,
        remrssi = remrssi,
        txbuf = txbuf,
        noise = noise,
        remnoise = remnoise,
        rxerrors = rxerrors,
        fixed = fixed,
      )
    }

    public operator fun invoke(builderAction: Builder.() -> Unit): RadioStatus =
        Builder().apply(builderAction).build()
  }

  public class Builder {
    public var rssi: UByte = 0u

    public var remrssi: UByte = 0u

    public var txbuf: UByte = 0u

    public var noise: UByte = 0u

    public var remnoise: UByte = 0u

    public var rxerrors: UShort = 0u

    public var fixed: UShort = 0u

    public fun build(): RadioStatus = RadioStatus(
      rssi = rssi,
      remrssi = remrssi,
      txbuf = txbuf,
      noise = noise,
      remnoise = remnoise,
      rxerrors = rxerrors,
      fixed = fixed,
    )
  }
}
